#include "generator.h"

#include <fstream>
#include <iostream>
#include <unordered_map>


enum class Token
{
    NONE,
    CLASS,
    STRUCT,
    ENUM,
    FUNCTION,
    PROPERTY
};

enum class Type
{
    NONE,
    UI64,
    UI32,
    UI16,
    UI8,
    I64,
    I32,
    I16,
    I8,
    CHAR,
    STRING,
    STRUCT,
    CLASS
};


static std::unordered_map<std::string, Token> tokens = {
    { "class", Token::CLASS },
    { "struct", Token::STRUCT },
    { "enum", Token::ENUM },
    { "function", Token::FUNCTION },
    { "property", Token::PROPERTY }
};


static std::unordered_map<std::string, Type> types = {
    { "ui64", Type::UI64 },
    { "ui32", Type::UI32 },
    { "ui16", Type::UI16 },
    { "ui8", Type::UI8 },
    { "i64", Type::I64 },
    { "i32", Type::I32 },
    { "i16", Type::I16 },
    { "i8", Type::I8 },
    { "char", Type::CHAR },
    { "string", Type::STRING }
};


Generator::Generator(const std::vector<std::string>& _start_files, const std::string& _output_folder) :
    start_files(_start_files),
    output_folder(_output_folder)
{}

int Generator::parse()
{
    int res;

    for (const std::string& filename : start_files)
    {
        std::ifstream file(filename);
        if (!file.is_open())
        {
            std::cerr << "Cannot open file " << filename;
            continue;
        }

        res = parse_file(file);
        if (res)
            return res;
    }
}

int Generator::parse_file(std::ifstream& file)
{
    std::string line;

    while(std::getline(file, line))
    {
        std::string word;
        file >> word;

        auto it_token = tokens.find(word);
        if (it_token == tokens.end())
            return -1;

        switch(it_token->second)
        {
        case Token::CLASS:
            break;
        case Token::STRUCT:
            break;
        case Token::ENUM:
            break;
        case Token::FUNCTION:
            break;
        case Token::PROPERTY:
            break;
        }
    }

    return 0;
}


%top{
#include "interface.parser.hpp"
#include "location.hpp"  /* Generated by bison %locations. */
}

%class{
 public:
  std::map<std::string,double> map;
}

%option bison-complete
%option bison-cc-namespace=yy
%option bison-cc-parser=parser
%option bison-locations
%option reentrant

/* throw an exception in the scanner's default rule */
%option exception="yy::parser::syntax_error(location(), \"Unknown token.\")"

%option tabs=4

%option namespace=yy
%option lexer=scanner

%option fast
%option flex

import  import
class   class
getter  get
setter  set
digit   [0-9]
alpha   [a-zA-Z_]
exp     [Ee][-+]?{digit}+
num     ({digit}+\.{digit}*)|({digit}*\.{digit}+){exp}?
str     {alpha}({alpha}|{digit})*

%%

[[:space:]]+        // skip white space
"//".*              // ignore inline comment
"/*"(.|\n)*?"*/"    // ignore multi-line comment using a lazy regex pattern
{import}            { return yy::parser::make_IMPORT(location()); }
{class}             { return yy::parser::make_CLASS(location()); }
{getter}            { return yy::parser::make_GETTER(location()); }
{setter}            { return yy::parser::make_SETTER(location()); }
{str}               { return yy::parser::make_STR(yytext, location()); }
{num}               { return yy::parser::make_NUM(strtod(yytext, NULL), location()); }
[-+*/=(){}:;\[\].,] { return yy::parser::symbol_type(*yytext, location()); }
<<EOF>>             { return yy::parser::make_EOF(location()); }

%%
